service: mindbody-scraper
provider:
  name: aws
  profile: banjo
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  region: us-west-2
  environment:
    region: ${self:provider.region}
    stage: ${self:provider.stage}
    allocationId:
      Fn::GetAtt: [ EIP, AllocationId ]
    routeTableId:
      Ref: PrivateRouteTable
    subnetId:
      Ref: PublicSubnetA
    vpcId:
      Ref: VPC
    classTypeQueueUrl:
      Ref: classTypeQueue
    classEventQueueUrl:
      Ref: classEventQueue
    classEventUserQueueUrl:
      Ref: classEventUserQueue
    clientQueueUrl:
      Ref: clientQueue
    pricingDetailQueueUrl:
      Ref: pricingDetailQueue
    productVariantQueueUrl:
      Ref: productVariantQueue
    productDetailQueueUrl:
      Ref: productDetailQueue
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - "${self:resources.Outputs.AppointmentTypesTable.Value}"
        - "${self:resources.Outputs.ClassEventsTable.Value}"
        - "${self:resources.Outputs.ClassCategoriesTable.Value}"
        - "${self:resources.Outputs.ClassTypesTable.Value}"
        - "${self:resources.Outputs.ClientsTable.Value}"
        - "${self:resources.Outputs.PricingDetailsTable.Value}"
        - "${self:resources.Outputs.ProductsTable.Value}"
    - Effect: Allow
      Action:
        - ec2:*
        - lambda:*
        - sqs:*
      Resource:
        - "*"
custom:
  natVPC:
    securityGroupIds:
      - Ref: SecurityGroup
    subnetIds:
      - Ref: PrivateSubnet

functions:
  createNat:
    handler: functions/createNat.handler
    timeout: 600
  deleteNat:
    handler: functions/deleteNat.handler
    timeout: 600
  getTest:
    handler: functions/getTest.handler
    timeout: 30
    vpc: ${self:custom.natVPC}
  getProductsByLetter:
    handler: functions/getProductsByLetter.handler
    timeout: 120
  getProductsByVariantId:
    handler: functions/getProductsByVariantId.handler
    timeout: 120
    reservedConcurrency: 20
    events:
      - sqs:
          batchSize: 10
          arn:
            Fn::GetAtt: [ productVariantQueue, Arn ]
  getProductDetails:
    handler: functions/getProductDetails.handler
    timeout: 120
    reservedConcurrency: 20
    events:
      - sqs:
          batchSize: 10
          arn:
            Fn::GetAtt: [ productDetailQueue, Arn ]
  getProducts:
    handler: functions/getProducts.handler
    timeout: 120
  getAppointmentTypes:
    handler: functions/getAppointmentTypes.handler
    timeout: 120
  getPricingDetails:
    handler: functions/getPricingDetails.handler
    timeout: 120
    reservedConcurrency: 20
    events:
      - sqs:
          batchSize: 10
          arn:
            Fn::GetAtt: [ pricingDetailQueue, Arn ]
  getPricing:
    handler: functions/getPricing.handler
    timeout: 120
  getClassTypeDetails:
    handler: functions/getClassTypeDetails.handler
    timeout: 120
    reservedConcurrency: 20
    events:
      - sqs:
          batchSize: 10
          arn:
            Fn::GetAtt: [ classTypeQueue, Arn ]
  getClassTypes:
    handler: functions/getClassTypes.handler
    timeout: 120
  getUserProfile:
    handler: functions/getUserProfile.handler
    timeout: 120
    reservedConcurrency: 50
    events:
      - sqs:
          batchSize: 10
          arn:
            Fn::GetAtt: [ clientQueue, Arn ]
  getUsers:
    handler: functions/getUsers.handler
    timeout: 120
  getDateRange:
    handler: functions/getDateRange.handler
    timeout: 120
  getClassEvents:
    handler: functions/getClassEvents.handler
    timeout: 120
    reservedConcurrency: 50
    events:
      - sqs:
          batchSize: 10
          arn:
            Fn::GetAtt: [ classEventQueue, Arn ]
  getClassEventUsers:
    handler: functions/getClassEventUsers.handler
    timeout: 120
    reservedConcurrency: 50
    events:
      - sqs:
          batchSize: 10
          arn:
            Fn::GetAtt: [ classEventUserQueue, Arn ]
resources:
  Resources:
    appointmentTypesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: AppointmentTypesTable
        AttributeDefinitions:
          - AttributeName: appointmentTypeId
            AttributeType: S
        KeySchema:
          - AttributeName: appointmentTypeId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '2'
          WriteCapacityUnits: '2'
    classEventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ClassEventsTable
        AttributeDefinitions:
          - AttributeName: classId
            AttributeType: S
        KeySchema:
          - AttributeName: classId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '2'
          WriteCapacityUnits: '2'
    classCategoriesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ClassCategoriesTable
        AttributeDefinitions:
          - AttributeName: classCategoryId
            AttributeType: S
        KeySchema:
          - AttributeName: classCategoryId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '2'
          WriteCapacityUnits: '2'
    classTypesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ClassTypesTable
        AttributeDefinitions:
          - AttributeName: classTypeId
            AttributeType: S
        KeySchema:
          - AttributeName: classTypeId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '2'
          WriteCapacityUnits: '2'
    clientsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ClientsTable
        AttributeDefinitions:
          - AttributeName: clientId
            AttributeType: S
        KeySchema:
          - AttributeName: clientId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '2'
          WriteCapacityUnits: '2'
    pricingDetailsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: PricingDetailsTable
        AttributeDefinitions:
          - AttributeName: pricingDetailId
            AttributeType: S
        KeySchema:
          - AttributeName: pricingDetailId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '2'
          WriteCapacityUnits: '2'
    productsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ProductsTable
        AttributeDefinitions:
          - AttributeName: productId
            AttributeType: S
        KeySchema:
          - AttributeName: productId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '2'
          WriteCapacityUnits: '2'
    classEventQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "ClassEventQueue"
        VisibilityTimeout: 120
    classEventUserQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "ClassEventUserQueue"
        VisibilityTimeout: 120
    classTypeQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "ClassTypeQueue"
        VisibilityTimeout: 120
    clientQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "ClientQueue"
        VisibilityTimeout: 120
    pricingDetailQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "PricingDetailQueue"
        VisibilityTimeout: 120
    productVariantQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "ProductVariantQueue"
        VisibilityTimeout: 120
    productDetailQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "ProductDetailQueue"
        VisibilityTimeout: 120

# VPC Resources
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true
        InstanceTenancy: default
    InternetGateway:
      Type: AWS::EC2::InternetGateway
    VPCGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
          VpcId:
            Ref: VPC
          InternetGatewayId:
            Ref: InternetGateway
    PublicSubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: us-west-2a
        VpcId:
          Ref: VPC
        CidrBlock: 10.0.1.0/24
        MapPublicIpOnLaunch: true
    RouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: VPC
    InternetRoute:
      Type: AWS::EC2::Route
      DependsOn: VPCGatewayAttachment
      Properties:
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: InternetGateway
        RouteTableId:
          Ref: RouteTable
    PublicSubnetARouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId:
          Ref: RouteTable
        SubnetId:
          Ref: PublicSubnetA
    PrivateSubnet:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: us-west-2a
        VpcId:
          Ref: VPC
        CidrBlock: 10.0.4.0/24
        MapPublicIpOnLaunch: false
    PrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: VPC
    EIP:
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc
    PrivateSubnetRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId:
          Ref: PrivateRouteTable
        SubnetId:
          Ref: PrivateSubnet
    SecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: "mindbody scraper SG"
        GroupDescription: "Mind body scraper security group"
        VpcId:
          Ref: VPC
    SecurityGroupIngress:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupId:
          Ref: SecurityGroup
        IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        SourceSecurityGroupId:
          Ref: SecurityGroup

    # NATGateway:
    #   Type: AWS::EC2::NatGateway
    #   Properties:
    #     AllocationId:
    #       Fn::GetAtt:
    #         - EIP
    #         - AllocationId
    #     SubnetId:
    #       Ref: PublicSubnetA
    # NatRoute:
    #   Type: AWS::EC2::Route
    #   Properties:
    #     RouteTableId:
    #       Ref: PrivateRouteTable
    #     DestinationCidrBlock: 0.0.0.0/0
    #     NatGatewayId:
    #       Ref: NATGateway


  Outputs:
    AppointmentTypesTable:
      Description: The ARN for the Appointment Types Table
      Value:
        "Fn::GetAtt": [ appointmentTypesTable, Arn ]
    ClassEventsTable:
      Description: The ARN for the Class Events Table
      Value:
        "Fn::GetAtt": [ classEventsTable, Arn ]
    ClassTypesTable:
      Description: The ARN for the Class Types Table
      Value:
        "Fn::GetAtt": [ classTypesTable, Arn ]
    ClassCategoriesTable:
      Description: The ARN for the Class Categories Table
      Value:
        "Fn::GetAtt": [ classCategoriesTable, Arn ]
    ClientsTable:
      Description: The ARN for the Clients Table
      Value:
        "Fn::GetAtt": [ clientsTable, Arn ]
    PricingDetailsTable:
      Description: The ARN for the Pricing Details Table
      Value:
        "Fn::GetAtt": [ pricingDetailsTable, Arn ]
    ProductsTable:
      Description: The ARN for the Products Table
      Value:
        "Fn::GetAtt": [ productsTable, Arn ]
